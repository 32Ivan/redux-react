{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  customers: []\n};\nexport const fetchCustomers = createAsyncThunk('customers/get', async thunkAPI => {\n  const response = await fetch('http://localhost:1066/customers/get');\n  const data = await response.json();\n  return data.customers;\n});\nexport const deleteCustomers = createAsyncThunk('customers/delete', async data => {\n  fetch(`http://localhost:1066/customers/delete/${data}`, {\n    method: 'DELETE'\n  }).then(async response => {\n    const data = await response.json();\n    if (!response.ok) {\n      const error = data && data.message || response.status;\n      return Promise.reject(error);\n    }\n  }).catch(error => {\n    console.error('There was an error!', error);\n  });\n});\nexport const saveCustomer = createAsyncThunk('customer/update', async _ref => {\n  let {\n    name,\n    surname,\n    city,\n    email,\n    dateOfBirth\n  } = _ref;\n  const response = await fetch('http://localhost:1066/customers/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: name,\n      surname: surname,\n      email: email,\n      city: city,\n      dateOfBirth: dateOfBirth\n    })\n  });\n  const data = await response.json();\n  return data;\n});\nexport const CustomerSlice = createSlice({\n  name: 'customer',\n  initialState,\n  reducers: {\n    addPerson: (state, action) => {\n      state.customers.push({\n        name: action.payload.name,\n        surname: action.payload.surname,\n        email: action.payload.email,\n        city: action.payload.city,\n        dateOfBirth: action.payload.dateOfBirth\n      });\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCustomers.fulfilled, (state, action) => {\n      state.customers = action.payload;\n    });\n    builder.addCase(deleteCustomers.fulfilled, () => {});\n  }\n});\nexport default CustomerSlice.reducer;\nexport const {\n  addPerson\n} = CustomerSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","customers","fetchCustomers","thunkAPI","response","fetch","data","json","deleteCustomers","method","then","ok","error","message","status","Promise","reject","catch","console","saveCustomer","name","surname","city","email","dateOfBirth","headers","body","JSON","stringify","CustomerSlice","reducers","addPerson","state","action","push","payload","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/home/bug23/Desktop/Kompare/front/src/store/features/customerSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ICustomerUpdate } from '../../components/CustomerType';\n\ninterface CustoemrState {\n    customers: ICustomerUpdate[];\n}\n\nconst initialState: CustoemrState = {\n    customers: []\n};\n\nexport const fetchCustomers = createAsyncThunk('customers/get', async (thunkAPI) => {\n    const response = await fetch('http://localhost:1066/customers/get');\n    const data = await response.json();\n\n    return data.customers;\n});\n\nexport const deleteCustomers = createAsyncThunk('customers/delete', async (data: string) => {\n    fetch(`http://localhost:1066/customers/delete/${data}`, { method: 'DELETE' })\n        .then(async (response) => {\n            const data = await response.json();\n\n            if (!response.ok) {\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n        })\n        .catch((error) => {\n            console.error('There was an error!', error);\n        });\n});\n\nexport const saveCustomer = createAsyncThunk(\n    'customer/update',\n    async ({ name, surname, city, email, dateOfBirth }: { name: string; surname: string; email: string; city: string; dateOfBirth: Date }) => {\n        const response = await fetch('http://localhost:1066/customers/create', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                surname: surname,\n                email: email,\n                city: city,\n                dateOfBirth: dateOfBirth\n            })\n        });\n        const data = await response.json();\n        return data;\n    }\n);\n\nexport const CustomerSlice = createSlice({\n    name: 'customer',\n    initialState,\n    reducers: {\n        addPerson: (state, action: PayloadAction<{ name: string; surname: string; email: string; city: string; dateOfBirth: Date }>) => {\n            state.customers.push({\n                name: action.payload.name,\n                surname: action.payload.surname,\n                email: action.payload.email,\n                city: action.payload.city,\n                dateOfBirth: action.payload.dateOfBirth\n            });\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchCustomers.fulfilled, (state, action) => {\n            state.customers = action.payload;\n        });\n\n        builder.addCase(deleteCustomers.fulfilled, () => {});\n    }\n});\n\nexport default CustomerSlice.reducer;\nexport const { addPerson } = CustomerSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}